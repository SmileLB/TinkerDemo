apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.example.administrator.tinkerdemo"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs{
        //签名打包
        release{
            storeFile file("tinker.jks")
            storePassword "123456"
            keyAlias "android"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'

    //可选，用于生成application类（provided只参与编译，不参与打包）
    provided('com.tencent.tinker:tinker-android-anno:1.7.11')
    //tinker的核心库
    compile('com.tencent.tinker:tinker-android-lib:1.7.11')

    compile "com.android.support:multidex:1.0.1"
}

//定义安装包路径。每次build时，如assembleDebug都会在bakApk目录下生成打包好的apk文件
def bakPath = file("${buildDir}/bakApk/")

ext {
    //这里是控制tinker开关的，平时debug的时候可以选择关闭
    tinkerEnabled = true

    tinkerOldApkPath = "${bakPath}/app-release-0730-18-31-13.apk"
    tinkerID="1.0"

    tinkerApplyMappingPath = "${bakPath}/app-release-0730-18-31-13-mapping.txt"

    tinkerApplyResourcePath = "${bakPath}/app-release-0730-18-31-13-R.txt"

    tinkerBuildFlavorDirectory = "${bakPath}/"
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def buildWithTinker() {
    return ext.tinkerEnabled
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    //如果没有指定TINKER_ID，就会通过gitSha()方法获取
    return ext.tinkerID
}

if (buildWithTinker()) {
    //启用Tinker
    apply plugin: 'com.tencent.tinker.patch'
    //跟命令行介入时的tinker_config.xml中的配置差不多，可根据自己情况做相应修改
    tinkerPatch {
        //指定oldApk文件路径
        oldApk = getOldApkPath()
        //不忽略Tinker的警告，有警告则终止Patch文件的生成
        ignoreWarning = false
        //强制Patch文件也使用签名
        useSign = true
        //指定是否启用Tinker
        tinkerEnable = buildWithTinker()

        buildConfig {
            //指定oldapk打包时所使用的混淆规则文件
            applyMapping = getApplyMappingPath()
            //指定oldApk的资源文件
            applyResourceMapping = getApplyResourceMappingPath()
            //指定tinkerID
            tinkerId = getTinkerIdValue()

            keepDexApply = false
        }

        dex {

            dexMode = "jar"//jar、raw
            //指定dex文件目录
            pattern = ["classes*.dex","assets/secondary-dex-?.jar"]
            //指定加载patch文件时所用到的类
            loader = ["com.tencent.tinker.loader.app.TinkerApplication.MyTinkerApplication"]
        }

        lib {
            pattern = ["lib/*/*.so"]
        }

        res {
            //指定tinker可以修改的所有资源文件路径
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            //指定不受影响的资源路径
            ignoreChange = ["assets/sample_meta.txt"]
            //资源修改大小的默认值
            largeModSize = 100
        }

        //指定本次补丁包的信息
        packageConfig {
            configField("patchMessage", "fix the 1.0 version's bugs")
            configField("platform", "all")
            configField("patchVersion", "1.0")
        }

    }

    //这里是多渠道打包和将打好的包copy的bakApk目录的代码
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each {flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0

    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}